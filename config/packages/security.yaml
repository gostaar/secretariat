security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:

        home:
            pattern: ^/$
            security: false

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider

            form_login:
                login_path: app_login
                check_path: app_login
                success_handler: App\Security\LoginSuccessHandler # Utilisation du custom success handler

            logout:
                path: /logout
                target: /
                invalidate_session: true 

        api:
            pattern: ^/google-calendar
            # stateless: true
            json_login:
                check_path: /google-calendar/login
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Permettre l'accès anonyme pour la page d'accueil
        - { path: ^/$, roles: IS_AUTHENTICATED_ANONYMOUSLY, allow_if: "not is_granted('IS_AUTHENTICATED_FULLY')" }        
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/user, roles: ROLE_USER}
        # - { path: ^/google-calendar, roles: [ROLE_USER, ROLE_ADMIN]}
        # ici je voudrais que si je suis authentifié, je ne peux pas accéder à ces pages
        # - { path: ^/(login|)$, roles: IS_AUTHENTICATED_FULLY, allow_if: false }

when@test:
    security:
        password_hashers:
            App\Entity\User: 'auto'

            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
